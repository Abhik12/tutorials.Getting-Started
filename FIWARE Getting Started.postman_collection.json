{
	"info": {
		"_postman_id": "0092fea0-57a6-4b4b-a998-c0367382d31e",
		"name": "FIWARE Getting Started",
		"description": "Our demo application will only make use of one FIWARE component - the [Orion Context Broker](https://catalogue.fiware.org/enablers/publishsubscribe-context-broker-orion-context-broker) . Usage of the Orion Context Broker is sufficient for an application to qualify as “Powered by FIWARE”.\n\nThis collection consists of a series of HTTP requests to the Orion Broker. It is assumed that orion is running on port 1026 of the `localhost` \n\n## Initialization\n\n```bash \ndocker pull mongo:3.6\ndocker pull fiware/orion\ndocker network create my-net\n```\n\n## Start Up\n```bash\ndocker run -d --name=context-db --network=my-net \\\n  --expose=27017 mongo:3.6 --bind_ip_all --smallfiles\ndocker run -d --name orion  --network=my-net \\\n  -p 1026:1026  fiware/orion -dbhost context-db\n``` ",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Obtaining Version Information",
			"request": {
				"method": "GET",
				"header": [],
				"body": {},
				"url": {
					"raw": "http://{{orion}}/version",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"version"
					]
				},
				"description": "Once the Orion Context Broker is running, You can check the status by making an HTTP request to the exposed port. \nIf the response is blank, this is usually because the MongoDB database holding the context information is not running or not connected."
			},
			"response": []
		},
		{
			"name": "Creating your first Data Entity",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"store1\",\n    \"type\": \"Store\",\n   \"address\": {\n        \"type\": \"PostalAddress\",\n        \"value\": {\n            \"streetAddress\": \"Bornholmer Straße 65\",\n            \"addressRegion\": \"Berlin\",\n            \"addressLocality\": \"Prenzlauer Berg\",\n            \"postalCode\": \"10439\"\n        }\n    },\n    \"location\": {\n        \"type\": \"geo:point\",\n        \"value\": \"52.5547, 13.3986\"\n    },\n    \"name\": {\n        \"type\": \"Text\",\n        \"value\": \"Bose Brucke Einkauf\"\n    }\n}"
				},
				"url": {
					"raw": "http://{{orion}}/entities/",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"entities",
						""
					]
				},
				"description": "## Creating Context Data\n\nAt its heart, FIWARE is a system for managing context information, so lets add some context data into the system by creating a  new entity (a store in **Berlin**). Any entity must have a `id` and `type` attributes, additional attributes are optional and will depend on the system being described. Each additional attribute should also have a defined `type` and a `value` attribute."
			},
			"response": []
		},
		{
			"name": "Creating your Second Data Entity",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"store2\",\n    \"type\": \"Store\",\n    \"address\": {\n        \"type\": \"PostalAddress\",\n        \"value\": {\n            \"streetAddress\": \"Friedrichstraße 44\",\n            \"addressRegion\": \"Berlin\",\n            \"addressLocality\": \"Kreuzberg\",\n            \"postalCode\": \"10969\"\n        }\n    },\n    \"location\": {\n        \"type\": \"geo:point\",\n        \"value\": \"52.5075, 13.3903\"\n    },\n    \"name\": {\n        \"type\": \"Text\",\n        \"value\": \"Checkpoint Markt\"\n    }\n}"
				},
				"url": {
					"raw": "http://{{orion}}/v2/entities/",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"v2",
						"entities",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Retrieving Context Information",
			"request": {
				"method": "GET",
				"header": [],
				"body": {},
				"url": {
					"raw": "http://{{orion}}/v2/entities",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"v2",
						"entities"
					]
				},
				"description": "This example returns the full data context"
			},
			"response": []
		},
		{
			"name": "Obtain Entity Data by id",
			"request": {
				"method": "GET",
				"header": [],
				"body": {},
				"url": {
					"raw": "http://{{orion}}/v2/entities/store1?options=keyValues",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"v2",
						"entities",
						"store1"
					],
					"query": [
						{
							"key": "options",
							"value": "keyValues",
							"description": "* `keyValues` option in order to get a more compact and brief representation, including just attribute values\n* `values` option combined with a list of attribute values  `attrs`  for an ordered list of attributes only"
						},
						{
							"key": "type",
							"value": "Store",
							"description": "Entity type, to avoid ambiguity in case there are several entities with the same entity id",
							"disabled": true
						},
						{
							"key": "attrs",
							"value": "name",
							"description": "Ordered list of attribute names to display",
							"disabled": true
						},
						{
							"key": "options",
							"value": "keyValues",
							"description": "* `keyValues` option in order to get a more compact and brief representation, including just attribute values\n* `values` option combined with a list of attribute values  `attrs`  for an ordered list of attributes only",
							"disabled": true
						}
					]
				},
				"description": "This example returns the context data of `store1`. The `id` of the entity should be unique or the `type` parameter should also be used"
			},
			"response": []
		},
		{
			"name": "Obtain Entity Data by type",
			"request": {
				"method": "GET",
				"header": [],
				"body": {},
				"url": {
					"raw": "http://{{orion}}/v2/entities/?type=Store&options=keyValues",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"v2",
						"entities",
						""
					],
					"query": [
						{
							"key": "type",
							"value": "Store",
							"description": "Entity type"
						},
						{
							"key": "options",
							"value": "keyValues",
							"description": "* `keyValues` option in order to get a more compact and brief representation, including just attribute values\n* `values` option combined with a list of attribute values  `attrs`  for an ordered list of attributes only"
						},
						{
							"key": "attrs",
							"value": "name",
							"description": "Ordered list of attribute names to display",
							"disabled": true
						}
					]
				},
				"description": "This example returns the data of all `Store` entities within the context data"
			},
			"response": []
		},
		{
			"name": "Filter context data by text value",
			"request": {
				"method": "GET",
				"header": [],
				"body": {},
				"url": {
					"raw": "http://{{orion}}/v2/entities/?q=address.addressLocality==Kreuzberg&type=Store&options=keyValues",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"v2",
						"entities",
						""
					],
					"query": [
						{
							"key": "q",
							"value": "address.addressLocality==Kreuzberg"
						},
						{
							"key": "type",
							"value": "Store"
						},
						{
							"key": "options",
							"value": "keyValues"
						}
					]
				},
				"description": "## Filter context data by comparing the values of an attribute\n\nThis example returns the data of all `Store` entities found in the **Kreuzberg** district of Berlin."
			},
			"response": []
		},
		{
			"name": "Filter context data by distance",
			"request": {
				"method": "GET",
				"header": [],
				"body": {},
				"url": {
					"raw": "http://{{orion}}/v2/entities/?georel=near;maxDistance:1500&geometry=point&coords=52.5162,13.3777&type=Store&options=keyValues",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"v2",
						"entities",
						""
					],
					"query": [
						{
							"key": "georel",
							"value": "near;maxDistance:1500"
						},
						{
							"key": "geometry",
							"value": "point"
						},
						{
							"key": "coords",
							"value": "52.5162,13.3777"
						},
						{
							"key": "type",
							"value": "Store"
						},
						{
							"key": "options",
							"value": "keyValues",
							"description": "* `keyValues` option in order to get a more compact and brief representation, including just attribute values\n* `values` option combined with a list of attribute values  `attrs`  for an ordered list of attributes only"
						},
						{
							"key": "attrs",
							"value": "name",
							"description": "Ordered list of attribute names to display",
							"disabled": true
						}
					]
				},
				"description": "## Filter context data by comparing the values of a geo:point attribute\n\nThis example returns the data of all `Store` entities found within 1.5km the **Brandenburg Gate**  in **Berlin** (*52.5162N 13.3777W*)"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "581cc060-de73-4283-915a-fcaa1c126830",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "5215414e-418f-4c32-8070-b68d62c90ea4",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "a2463600-4bbc-4866-8f86-d12163376cf0",
			"key": "orion",
			"value": "localhost:1026",
			"type": "string",
			"description": ""
		}
	]
}